import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder, StandardScaler

# 读取数据
df = pd.read_excel('岩性识别.xlsx')


# 将分类数据编码为整数
label_encoder = LabelEncoder()
df['岩性'] = label_encoder.fit_transform(df['岩性'])

# 特征和标签
X = df[['AC', 'LLD','GR','CNL','SP','DEN']]
y = df['岩性']

# 划分训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 特征归一化处理
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)  # 只对训练集进行归一化
X_test_scaled = scaler.transform(X_test)  # 对测试集进行归一化

# 初始化随机森林分类器
rf_classifier = RandomForestClassifier(random_state=42)

# 设置网格搜索的参数范围
param_grid = {
    'n_estimators': [50, 100, 200],  # 树的数量
    'max_depth': [10, 20, 30, 40],    # 树的最大深度
    'min_samples_split': [2, 5, 9],   # 节点划分最少样本数
    'min_samples_leaf': [1, 2, 4]     # 叶节点最少样本数
}

# 初始化网格搜索
grid_search = GridSearchCV(estimator=rf_classifier, param_grid=param_grid, cv=5, n_jobs=1, verbose=2, scoring='accuracy')

# 训练模型
grid_search.fit(X_train_scaled, y_train)

# 获取最佳参数和模型
print('Best parameters: {}'.format(grid_search.best_params_))
best_rf_classifier = grid_search.best_estimator_

# 使用最佳模型进行预测
y_pred = best_rf_classifier.predict(X_test_scaled)

# 评估模型
accuracy = accuracy_score(y_test, y_pred)
print('Best model accuracy: {:.2f}'.format(accuracy))
