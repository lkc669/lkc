from sklearn import svm
from sklearn.metrics import classification_report
import numpy as np
import pandas as pd

# Define the SVM classifier function (SVC)
def svm_svc(x_train, y_train, x):
    clf = svm.SVC()  # Support Vector Machine Classifier
    clf.fit(x_train, y_train)  # Train the model
    answer = clf.predict(x)  # Predict the results
    return answer

# Define the linear SVM classifier function (LinearSVC)
def svm_linear_svc(x_train, y_train, x):
    clf = svm.LinearSVC()  # Linear Support Vector Machine Classifier
    clf.fit(x_train, y_train)  # Train the model
    answer = clf.predict(x)  # Predict the results
    return answer

# Example: Using SVM algorithms
def svm_example():
    # Read data
    df = pd.read_excel('./datab/crack_recognition_sample_yb.xlsx', sheet_name='Sheet1')
    # Get x_train parameters and y_train data
    x_train = np.array(df[["AC_nor", 'DEN_nor', "CNL_nor", "RD_nor", "RS_nor", "RDS_nor"]])
    y_train = np.array(df["mom"]).tolist()

    # Read the data that needs to be predicted
    wellname = 'Well_X'  # Modify as needed
    data = pd.read_excel(f'./data/temp/{wellname}.xlsx', sheet_name='Sheet1')
    x = np.array(data[["AC_nor", 'DEN_nor', "CNL_nor", "RD_nor", "RS_nor", "RDS_nor"]])

    # Use SVM algorithm for prediction
    predictions = svm_svc(x_train, y_train, x)

    # Output the prediction results
    print(predictions)
    # Optionally, you can calculate accuracy and other metrics
    print(classification_report(y_train, predictions, target_names=['nan', 'None', 'Half', 'Full']))

# Example call
svm_example()
